/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package b_bots;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.JPanel;
import java.util.*;
import javax.imageio.ImageIO;

/**
 *
 * @author Brian
 */
public class Interface extends javax.swing.JFrame {
    
    final int TICKRATE = 5;
    Timer tick = new Timer();
    
    final int LIGHTSIZE = 20;
    final int BOTSIZE = 14;
    
    ArrayList lights = new ArrayList();
    ArrayList bots = new ArrayList();
    
    int[] degrees = {0,45,90,135,180,225,270,315};
    BufferedImage botpic = null;
    
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        try{
            botpic = ImageIO.read(Interface.class.getResource("Bot.bmp"));
        } 
        catch (IOException e) {System.out.println("Cant load bot img.");}
        tick.scheduleAtFixedRate(new TickTask(), 0, TICKRATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RobotFrame = new javax.swing.JPanel();
        lights_label = new javax.swing.JLabel();
        addLightButton = new javax.swing.JToggleButton();
        removeLightButton = new javax.swing.JToggleButton();
        bot_label = new javax.swing.JLabel();
        addBotButton = new javax.swing.JToggleButton();
        removeBotButton = new javax.swing.JToggleButton();
        pauseBots = new javax.swing.JCheckBox();
        degreeBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RobotFrame = new RobotWorkspace();
        RobotFrame.setBackground(new java.awt.Color(255, 255, 255));
        RobotFrame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        RobotFrame.setPreferredSize(new java.awt.Dimension(800, 600));
        RobotFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RobotFrameMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout RobotFrameLayout = new javax.swing.GroupLayout(RobotFrame);
        RobotFrame.setLayout(RobotFrameLayout);
        RobotFrameLayout.setHorizontalGroup(
            RobotFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );
        RobotFrameLayout.setVerticalGroup(
            RobotFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        lights_label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lights_label.setText("Light Controls");

        addLightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addLightButton.setText("Add Light");
        addLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLightButtonActionPerformed(evt);
            }
        });

        removeLightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeLightButton.setText("Remove Light");
        removeLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLightButtonActionPerformed(evt);
            }
        });

        bot_label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bot_label.setText("Bot Controls");

        addBotButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addBotButton.setText("Add Bot");
        addBotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBotButtonActionPerformed(evt);
            }
        });

        removeBotButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeBotButton.setText("Remove Bot");
        removeBotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBotButtonActionPerformed(evt);
            }
        });

        pauseBots.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pauseBots.setText("Pause Bots");

        degreeBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        degreeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "45", "90", "135", "180", "225", "270", "315", " ", " ", " ", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RobotFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lights_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bot_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pauseBots)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addLightButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeBotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeLightButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addBotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(degreeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(RobotFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lights_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addLightButton)
                        .addGap(11, 11, 11)
                        .addComponent(removeLightButton)
                        .addGap(18, 18, 18)
                        .addComponent(bot_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBotButton)
                            .addComponent(degreeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeBotButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseBots)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLightButtonActionPerformed
        removeLightButton.setSelected(false);
        addBotButton.setSelected(false);
        removeBotButton.setSelected(false);
    }//GEN-LAST:event_addLightButtonActionPerformed

    private void removeLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLightButtonActionPerformed
        addLightButton.setSelected(false);
        addBotButton.setSelected(false);
        removeBotButton.setSelected(false);
    }//GEN-LAST:event_removeLightButtonActionPerformed

    private void addBotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBotButtonActionPerformed
        removeBotButton.setSelected(false);
        addLightButton.setSelected(false);
        removeLightButton.setSelected(false);
    }//GEN-LAST:event_addBotButtonActionPerformed

    private void removeBotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBotButtonActionPerformed
        addBotButton.setSelected(false);
        addLightButton.setSelected(false);
        removeLightButton.setSelected(false);
    }//GEN-LAST:event_removeBotButtonActionPerformed

    private void RobotFrameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RobotFrameMouseReleased
        if(addLightButton.isSelected())
            lights.add(new Light(evt.getPoint()));
        else if(addBotButton.isSelected())
            bots.add(new Bot(evt.getPoint(),degrees[degreeBox.getSelectedIndex()]));
        else if(removeLightButton.isSelected()){
            for (ListIterator<Light> iter = lights.listIterator(); iter.hasNext(); ){
                Light element = iter.next();
                if( (evt.getX() >= element.x-LIGHTSIZE/2 && evt.getX() <= element.x+LIGHTSIZE) && (evt.getY() >= element.y-LIGHTSIZE/2 && evt.getY() <= element.y+LIGHTSIZE) )
                    iter.remove();
            }
        }
        else if(removeBotButton.isSelected()){
            for (ListIterator<Bot> iter = bots.listIterator(); iter.hasNext(); ){
                Bot element = iter.next();
                if( (evt.getX() >= element.x-BOTSIZE/2 && evt.getX() <= element.x+BOTSIZE) && (evt.getY() >= element.y-BOTSIZE/2 && evt.getY() <= element.y+BOTSIZE) )
                    iter.remove();
            }
        }
        RobotFrame.repaint();
    }//GEN-LAST:event_RobotFrameMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RobotFrame;
    private javax.swing.JToggleButton addBotButton;
    private javax.swing.JToggleButton addLightButton;
    private javax.swing.JLabel bot_label;
    private javax.swing.JComboBox degreeBox;
    private javax.swing.JLabel lights_label;
    private javax.swing.JCheckBox pauseBots;
    private javax.swing.JToggleButton removeBotButton;
    private javax.swing.JToggleButton removeLightButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * This TimerTask handles redrawing and anything based on tick rate (how often the robot frame updates)
     */
    class TickTask extends TimerTask{
        @Override
        public void run(){
            if(!pauseBots.isSelected()){
                for (ListIterator<Bot> iter = bots.listIterator(); iter.hasNext(); ){
                    Bot element = iter.next();
                    element.updateBot();
                }
                RobotFrame.repaint();
            }
        }
    }
    
    
    class RobotWorkspace extends JPanel{
        @Override
        public void paintComponent(Graphics g){
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D)g;
            
            //Draw Lights
            g2.setPaint(Color.yellow);
            for (ListIterator<Light> iter = lights.listIterator(); iter.hasNext(); ){
                Light element = iter.next();
                g2.fill(new Ellipse2D.Double(element.x-LIGHTSIZE/2, element.y-LIGHTSIZE/2, LIGHTSIZE, LIGHTSIZE));
            }
            
            //Draw Bots
            
            for (ListIterator<Bot> iter = bots.listIterator(); iter.hasNext(); ){
                Bot element = iter.next();
                double rotationRequired = Math.toRadians(element.theta+90);
                double locationX = botpic.getWidth() / 2;
                double locationY = botpic.getHeight() / 2;
                AffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
                AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
                g2.drawImage(op.filter(botpic,null), (int)element.x-BOTSIZE/2, (int)element.y-BOTSIZE/2, null);
            }
        }

        
    }



}
